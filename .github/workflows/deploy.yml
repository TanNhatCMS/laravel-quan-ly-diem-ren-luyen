name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      path_to_repo:
        required: true
        type: string
      deploy_url:
        required: true
        type: string
      ssh_user: 
        required: true
        type: string
      ssh_host: 
        required: true
        type: string
      github_token: 
        required: true
        type: string

jobs:
  deploy:
    runs-on: [self-hosted, ansible]
    environment: ${{ inputs.environment }}
    env:
      PATH_TO_REPO: ${{ inputs.path_to_repo }}
      ENVIRONMENT: ${{ inputs.environment }}
      DEPLOY_URL: ${{ inputs.deploy_url }}
      SSH_USER: ${{ inputs.ssh_user }}
      SSH_VPS_HOST: ${{ inputs.ssh_host }}
      GITHUB_TOKEN: ${{ inputs.github_token }}
    steps:
      - name: Specify Ref
        id: specify-ref
        run: |
          case "${{ github.ref_type }}" in
              "branch" ) REF=${{ github.ref_name }};;
              "tag" ) REF=${{ github.ref_name }};;
          esac
          if [ "${{ github.workflow }}" = "PRD Deploy" ]; then
            echo "INFO: PRD Deploy main"
            REF=main
          fi
          echo "REF=$REF" >> $GITHUB_OUTPUT

      - name: Create Deployment
        id: create_deployment
        run: |
          DEPLOYMENT_ID=$(curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/deployments \
               -d '{
                    "ref": "${{ github.ref }}",
                    "auto_merge": false,
                    "required_contexts": [],
                    "environment": "${{ env.ENVIRONMENT }}",
                    "production_environment": ${ { env.ENVIRONMENT == 'Production' }},
                    "auto_deployment": true,
                    "description": "Deploying to ${{ env.ENVIRONMENT }} server"
                  }' | jq -r .id)

          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Deploy Code
        run: |
          ssh -T ${{ env.SSH_USER }}@${{ env.SSH_VPS_HOST }} << EOF
            set -e
            if [ ! -d "${{ env.PATH_TO_REPO }}/.git" ]; then
              echo "Cloning repository..."
              git clone git@github.com:${{ github.repository }}.git ${{ env.PATH_TO_REPO }}
            fi
            cd ${{ env.PATH_TO_REPO }}
            git fetch --all
            git checkout ${{ steps.specify-ref.outputs.REF }}
            git pull origin ${{ steps.specify-ref.outputs.REF }}
          EOF

      - name: Mark Deployment as Successful
        if: success()
        run: |
          curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
               -d '{
                    "state": "success",
                    "description": "✅ ${{ env.ENVIRONMENT }} Deploy Success",
                    "environment_url": "${{ env.DEPLOY_URL }}"
                  }'

      - name: Mark Deployment as Failed
        if: failure()
        run: |
          curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
               -d '{
                    "state": "failure",
                    "description": "❌ ${{ env.ENVIRONMENT }} Deploy Failed"
                  }'
